#summary Outline of tasks for Naples sprint on GetPaid
#labels sprint

= Introduction =

With a goal to get to the Release Candidate for GetPaid Red Ochre version, the info below is about what needs to be done (from Kapil, kapilt(at)gmail.com ). 

= Details =


GetPaid Sprint Goals For Release
--------------------------------

What we need to make the release happen.

== Refactor Checkout Wizard ==

the checkout wizard basically sequences a set of formlib pages, based on list of steps. its a linear implementation at the moment. changing to a viewlet manager, would be more appropriate as we typically provide access to the wizard from the formlib step. 

=== Form Passing Refactoring Task ==

we want the wizard to be customizable in terms of adding/removing steps and overriding any given step, we get the latter via the component architecture, and while we notionally allow for changing the sequence of steps, the form passing in that case is won't work, and needs to be fixed. This needs some rework of the form passing, currently steps advertise which fields they will accept via the passed_fields atttribute, all the form passing should be reworked to automatically export all the current form vars already in the request. individual steps will control which variables they will export by defining an exported_fields attribute. form fields from a step which are not present should be deleted from the request variables, during update.

this task has one golden rule though, never transmit credit card information directly back to the browser. so we'll explicitly not list it as exported field.

=== Dependent Task : Duplicate Processing Protection ===

we want to avoid processing any charges on a card multiple times. after the form passing refactoring, we'll be able to pass an order id generated by the wizard, into the request form variables, that will be carried through to processing the checkout. if this order is already in use, we 

the checkout wizard makePayment action will check if an order already exists before creating a new one, if it does exist with appropriate timestamp and and the current user is the customer listed on the order as its owner, then we can redirect to the thank you page, directly. else we

=== Dependant Task: Separate Delivery Step ===

we should only be collecting delivery/shipping address information on orders that are shippable. additionally
we need to select a shipping method for these. add a new step, that collects shipping address and shipping method.

automatically enabling the delivery step it would be nice to make this step automatically enabled if the cart contains shippable items, via viewlet filtering or other.

== Import / Export ==

the import / export format consists of tarball of xml files in the following directory structure::

   orders/
     123123123.xml # order_id.xml
     ...
   products/
     ADFOIUSDF123.xml # archetype_uid.xml
     ...
   settings.xml # portal settings

the format of the xml is pretty simple, its not designed for human consumption, although it does pretty print, and is fairly readable, its primary purpose is marshalling and demarshalling simple python objects to xml. reading or writing a file typically takes a nested dictionary of values to serialize. keys become element names, etc. value type information is preserved to make reconstruction to the same values on deserialization possible. using zope.schema to retrieve and set values makes this process for interface content straightforward.

we have a top level importer and exporter which coordinates file structure and invoking all the de/serialization components. the exporter is functional, but currently the export process does not export product information, we need the following.

=== Product Catalog Task ===

we need a queryable index for products, that allows us to search and query for products. there is an implementation thats not wired in getpaid.core. the one issue for it is that its based on an order manager refactoring to be generic, meaning it actually wants to store products, but we really don't want. this needs to use intids to reference the individual products, so we need to index but not store the data, which is stored as annotations on the product.

it needs subscribers for payable creation, payable modification, and payable destruction, and payable deletion. destruction is the case where the payable interface is removed from a content. might need the introduction of this event publication for the payable initialized and payable destruction events into browser/content.py views, the rest are given by standard object events. the subscribers will keep the catalog in sync.

=== Dependent Product Export Task ===

export all information on payables, iterating via the product catalog which will return a set of payable adapters to resolved content. see the existing order exporting for example.

=== Order Processor Settings Export Task ===

we need to export annotation information on the order to the xml for an order, needs modification
of OrderWriter implementation. this is not zope.schema based data.

=== Import Task ===

The import part needs to be completed, basically it needs to have matching components for deserialization to the export process. creating orders from deserialized values and storing them in the order manager. looking up archetypes by uid, and setting up payables and attributes on them. values should by default update in place on import for both orders and payables (? or not.. i'm fine with accepting a sane default now, we can grow options latter).

